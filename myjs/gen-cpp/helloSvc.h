/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef helloSvc_H
#define helloSvc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "hello_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class helloSvcIf {
 public:
  virtual ~helloSvcIf() {}
  virtual void jscpp_message(std::string& _return, const std::string& message) = 0;
};

class helloSvcIfFactory {
 public:
  typedef helloSvcIf Handler;

  virtual ~helloSvcIfFactory() {}

  virtual helloSvcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(helloSvcIf* /* handler */) = 0;
  };

class helloSvcIfSingletonFactory : virtual public helloSvcIfFactory {
 public:
  helloSvcIfSingletonFactory(const ::std::shared_ptr<helloSvcIf>& iface) : iface_(iface) {}
  virtual ~helloSvcIfSingletonFactory() {}

  virtual helloSvcIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(helloSvcIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<helloSvcIf> iface_;
};

class helloSvcNull : virtual public helloSvcIf {
 public:
  virtual ~helloSvcNull() {}
  void jscpp_message(std::string& /* _return */, const std::string& /* message */) override {
    return;
  }
};

typedef struct _helloSvc_jscpp_message_args__isset {
  _helloSvc_jscpp_message_args__isset() : message(false) {}
  bool message :1;
} _helloSvc_jscpp_message_args__isset;

class helloSvc_jscpp_message_args {
 public:

  helloSvc_jscpp_message_args(const helloSvc_jscpp_message_args&);
  helloSvc_jscpp_message_args& operator=(const helloSvc_jscpp_message_args&);
  helloSvc_jscpp_message_args() noexcept
                              : message() {
  }

  virtual ~helloSvc_jscpp_message_args() noexcept;
  std::string message;

  _helloSvc_jscpp_message_args__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const helloSvc_jscpp_message_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const helloSvc_jscpp_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const helloSvc_jscpp_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class helloSvc_jscpp_message_pargs {
 public:


  virtual ~helloSvc_jscpp_message_pargs() noexcept;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _helloSvc_jscpp_message_result__isset {
  _helloSvc_jscpp_message_result__isset() : success(false) {}
  bool success :1;
} _helloSvc_jscpp_message_result__isset;

class helloSvc_jscpp_message_result {
 public:

  helloSvc_jscpp_message_result(const helloSvc_jscpp_message_result&);
  helloSvc_jscpp_message_result& operator=(const helloSvc_jscpp_message_result&);
  helloSvc_jscpp_message_result() noexcept
                                : success() {
  }

  virtual ~helloSvc_jscpp_message_result() noexcept;
  std::string success;

  _helloSvc_jscpp_message_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const helloSvc_jscpp_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const helloSvc_jscpp_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const helloSvc_jscpp_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _helloSvc_jscpp_message_presult__isset {
  _helloSvc_jscpp_message_presult__isset() : success(false) {}
  bool success :1;
} _helloSvc_jscpp_message_presult__isset;

class helloSvc_jscpp_message_presult {
 public:


  virtual ~helloSvc_jscpp_message_presult() noexcept;
  std::string* success;

  _helloSvc_jscpp_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class helloSvcClient : virtual public helloSvcIf {
 public:
  helloSvcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  helloSvcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void jscpp_message(std::string& _return, const std::string& message) override;
  void send_jscpp_message(const std::string& message);
  void recv_jscpp_message(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class helloSvcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<helloSvcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (helloSvcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_jscpp_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  helloSvcProcessor(::std::shared_ptr<helloSvcIf> iface) :
    iface_(iface) {
    processMap_["jscpp_message"] = &helloSvcProcessor::process_jscpp_message;
  }

  virtual ~helloSvcProcessor() {}
};

class helloSvcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  helloSvcProcessorFactory(const ::std::shared_ptr< helloSvcIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< helloSvcIfFactory > handlerFactory_;
};

class helloSvcMultiface : virtual public helloSvcIf {
 public:
  helloSvcMultiface(std::vector<std::shared_ptr<helloSvcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~helloSvcMultiface() {}
 protected:
  std::vector<std::shared_ptr<helloSvcIf> > ifaces_;
  helloSvcMultiface() {}
  void add(::std::shared_ptr<helloSvcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void jscpp_message(std::string& _return, const std::string& message) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->jscpp_message(_return, message);
    }
    ifaces_[i]->jscpp_message(_return, message);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class helloSvcConcurrentClient : virtual public helloSvcIf {
 public:
  helloSvcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  helloSvcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void jscpp_message(std::string& _return, const std::string& message) override;
  int32_t send_jscpp_message(const std::string& message);
  void recv_jscpp_message(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
