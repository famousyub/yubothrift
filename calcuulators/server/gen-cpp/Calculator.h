/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "calculator_types.h"

namespace calculator {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual double calc(const ArithmeticOperation& op) = 0;
  virtual void mult(Matrix& _return, const Matrix& A, const Matrix& B) = 0;
  virtual void transpose(Matrix& _return, const Matrix& A) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
  };

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const ::std::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  double calc(const ArithmeticOperation& /* op */) override {
    double _return = 0.0;
    return _return;
  }
  void mult(Matrix& /* _return */, const Matrix& /* A */, const Matrix& /* B */) override {
    return;
  }
  void transpose(Matrix& /* _return */, const Matrix& /* A */) override {
    return;
  }
};

typedef struct _Calculator_calc_args__isset {
  _Calculator_calc_args__isset() : op(false) {}
  bool op :1;
} _Calculator_calc_args__isset;

class Calculator_calc_args {
 public:

  Calculator_calc_args(const Calculator_calc_args&) noexcept;
  Calculator_calc_args& operator=(const Calculator_calc_args&) noexcept;
  Calculator_calc_args() noexcept {
  }

  virtual ~Calculator_calc_args() noexcept;
  ArithmeticOperation op;

  _Calculator_calc_args__isset __isset;

  void __set_op(const ArithmeticOperation& val);

  bool operator == (const Calculator_calc_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const Calculator_calc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_calc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_calc_pargs {
 public:


  virtual ~Calculator_calc_pargs() noexcept;
  const ArithmeticOperation* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_calc_result__isset {
  _Calculator_calc_result__isset() : success(false), ae(false) {}
  bool success :1;
  bool ae :1;
} _Calculator_calc_result__isset;

class Calculator_calc_result {
 public:

  Calculator_calc_result(const Calculator_calc_result&);
  Calculator_calc_result& operator=(const Calculator_calc_result&);
  Calculator_calc_result() noexcept
                         : success(0) {
  }

  virtual ~Calculator_calc_result() noexcept;
  double success;
  ArithmeticException ae;

  _Calculator_calc_result__isset __isset;

  void __set_success(const double val);

  void __set_ae(const ArithmeticException& val);

  bool operator == (const Calculator_calc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Calculator_calc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_calc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_calc_presult__isset {
  _Calculator_calc_presult__isset() : success(false), ae(false) {}
  bool success :1;
  bool ae :1;
} _Calculator_calc_presult__isset;

class Calculator_calc_presult {
 public:


  virtual ~Calculator_calc_presult() noexcept;
  double* success;
  ArithmeticException ae;

  _Calculator_calc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_mult_args__isset {
  _Calculator_mult_args__isset() : A(false), B(false) {}
  bool A :1;
  bool B :1;
} _Calculator_mult_args__isset;

class Calculator_mult_args {
 public:

  Calculator_mult_args(const Calculator_mult_args&);
  Calculator_mult_args& operator=(const Calculator_mult_args&);
  Calculator_mult_args() noexcept {
  }

  virtual ~Calculator_mult_args() noexcept;
  Matrix A;
  Matrix B;

  _Calculator_mult_args__isset __isset;

  void __set_A(const Matrix& val);

  void __set_B(const Matrix& val);

  bool operator == (const Calculator_mult_args & rhs) const
  {
    if (!(A == rhs.A))
      return false;
    if (!(B == rhs.B))
      return false;
    return true;
  }
  bool operator != (const Calculator_mult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_mult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_mult_pargs {
 public:


  virtual ~Calculator_mult_pargs() noexcept;
  const Matrix* A;
  const Matrix* B;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_mult_result__isset {
  _Calculator_mult_result__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _Calculator_mult_result__isset;

class Calculator_mult_result {
 public:

  Calculator_mult_result(const Calculator_mult_result&);
  Calculator_mult_result& operator=(const Calculator_mult_result&);
  Calculator_mult_result() noexcept {
  }

  virtual ~Calculator_mult_result() noexcept;
  Matrix success;
  MatrixException me;

  _Calculator_mult_result__isset __isset;

  void __set_success(const Matrix& val);

  void __set_me(const MatrixException& val);

  bool operator == (const Calculator_mult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(me == rhs.me))
      return false;
    return true;
  }
  bool operator != (const Calculator_mult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_mult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_mult_presult__isset {
  _Calculator_mult_presult__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _Calculator_mult_presult__isset;

class Calculator_mult_presult {
 public:


  virtual ~Calculator_mult_presult() noexcept;
  Matrix* success;
  MatrixException me;

  _Calculator_mult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_transpose_args__isset {
  _Calculator_transpose_args__isset() : A(false) {}
  bool A :1;
} _Calculator_transpose_args__isset;

class Calculator_transpose_args {
 public:

  Calculator_transpose_args(const Calculator_transpose_args&);
  Calculator_transpose_args& operator=(const Calculator_transpose_args&);
  Calculator_transpose_args() noexcept {
  }

  virtual ~Calculator_transpose_args() noexcept;
  Matrix A;

  _Calculator_transpose_args__isset __isset;

  void __set_A(const Matrix& val);

  bool operator == (const Calculator_transpose_args & rhs) const
  {
    if (!(A == rhs.A))
      return false;
    return true;
  }
  bool operator != (const Calculator_transpose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_transpose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_transpose_pargs {
 public:


  virtual ~Calculator_transpose_pargs() noexcept;
  const Matrix* A;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_transpose_result__isset {
  _Calculator_transpose_result__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _Calculator_transpose_result__isset;

class Calculator_transpose_result {
 public:

  Calculator_transpose_result(const Calculator_transpose_result&);
  Calculator_transpose_result& operator=(const Calculator_transpose_result&);
  Calculator_transpose_result() noexcept {
  }

  virtual ~Calculator_transpose_result() noexcept;
  Matrix success;
  MatrixException me;

  _Calculator_transpose_result__isset __isset;

  void __set_success(const Matrix& val);

  void __set_me(const MatrixException& val);

  bool operator == (const Calculator_transpose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(me == rhs.me))
      return false;
    return true;
  }
  bool operator != (const Calculator_transpose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_transpose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_transpose_presult__isset {
  _Calculator_transpose_presult__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _Calculator_transpose_presult__isset;

class Calculator_transpose_presult {
 public:


  virtual ~Calculator_transpose_presult() noexcept;
  Matrix* success;
  MatrixException me;

  _Calculator_transpose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double calc(const ArithmeticOperation& op) override;
  void send_calc(const ArithmeticOperation& op);
  double recv_calc();
  void mult(Matrix& _return, const Matrix& A, const Matrix& B) override;
  void send_mult(const Matrix& A, const Matrix& B);
  void recv_mult(Matrix& _return);
  void transpose(Matrix& _return, const Matrix& A) override;
  void send_transpose(const Matrix& A);
  void recv_transpose(Matrix& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_calc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transpose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(::std::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["calc"] = &CalculatorProcessor::process_calc;
    processMap_["mult"] = &CalculatorProcessor::process_mult;
    processMap_["transpose"] = &CalculatorProcessor::process_transpose;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::std::shared_ptr< CalculatorIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<std::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(::std::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double calc(const ArithmeticOperation& op) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calc(op);
    }
    return ifaces_[i]->calc(op);
  }

  void mult(Matrix& _return, const Matrix& A, const Matrix& B) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mult(_return, A, B);
    }
    ifaces_[i]->mult(_return, A, B);
    return;
  }

  void transpose(Matrix& _return, const Matrix& A) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transpose(_return, A);
    }
    ifaces_[i]->transpose(_return, A);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculatorConcurrentClient : virtual public CalculatorIf {
 public:
  CalculatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CalculatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double calc(const ArithmeticOperation& op) override;
  int32_t send_calc(const ArithmeticOperation& op);
  double recv_calc(const int32_t seqid);
  void mult(Matrix& _return, const Matrix& A, const Matrix& B) override;
  int32_t send_mult(const Matrix& A, const Matrix& B);
  void recv_mult(Matrix& _return, const int32_t seqid);
  void transpose(Matrix& _return, const Matrix& A) override;
  int32_t send_transpose(const Matrix& A);
  void recv_transpose(Matrix& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
