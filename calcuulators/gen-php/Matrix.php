<?php
/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Matrix
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'rows',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'cols',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'data',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::LST,
            'elem' => array(
                'type' => TType::LST,
                'etype' => TType::DOUBLE,
                'elem' => array(
                    'type' => TType::DOUBLE,
                    ),
                ),
        ),
    );

    /**
     * @var int
     */
    public $rows = null;
    /**
     * @var int
     */
    public $cols = null;
    /**
     * @var double[][]
     */
    public $data = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['rows'])) {
                $this->rows = $vals['rows'];
            }
            if (isset($vals['cols'])) {
                $this->cols = $vals['cols'];
            }
            if (isset($vals['data'])) {
                $this->data = $vals['data'];
            }
        }
    }

    public function getName()
    {
        return 'Matrix';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->rows);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->cols);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->data = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = array();
                            $_size6 = 0;
                            $_etype9 = 0;
                            $xfer += $input->readListBegin($_etype9, $_size6);
                            for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                                $elem11 = null;
                                $xfer += $input->readDouble($elem11);
                                $elem5 []= $elem11;
                            }
                            $xfer += $input->readListEnd();
                            $this->data []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Matrix');
        if ($this->rows !== null) {
            $xfer += $output->writeFieldBegin('rows', TType::I64, 1);
            $xfer += $output->writeI64($this->rows);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cols !== null) {
            $xfer += $output->writeFieldBegin('cols', TType::I64, 2);
            $xfer += $output->writeI64($this->cols);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->data !== null) {
            if (!is_array($this->data)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('data', TType::LST, 3);
            $output->writeListBegin(TType::LST, count($this->data));
            foreach ($this->data as $iter12) {
                $output->writeListBegin(TType::DOUBLE, count($iter12));
                foreach ($iter12 as $iter13) {
                    $xfer += $output->writeDouble($iter13);
                }
                $output->writeListEnd();
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
